apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    instance: executor
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        instance: executor
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ if .Values.rbac.create }}{{ template "fullname" . }}{{ else }}{{ .Values.rbac.serviceAccountName | quote }}{{ end }}
      hostname: "{{ template "fullname" . }}"
      initContainers:
      - name: kube-plex-install
        image: "{{ .Values.kubePlexImage.repository }}:{{ .Values.kubePlexImage.tag }}"
        imagePullPolicy: {{ .Values.kubePlexImage.pullPolicy }}
        command:
        - cp
        - /kubeplex
        - /shared/kubeplex
        volumeMounts:
        - name: shared
          mountPath: /shared
      containers:
      - name: plex
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # We replace the PMS binary with a postStart hook to save having to
        # modify the default image entrypoint.
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - -c
              - |
                #!/bin/bash
                set -e
                rm -f '/usr/lib/plexmediaserver/Plex Transcoder'
                cp /shared/kubeplex '/usr/lib/plexmediaserver/Plex Transcoder'
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: 32400
        env:
        - name: TZ
          value: Europe/London
        # TODO: move this to a secret?
        - name: PLEX_CLAIM
          value: "{{ .Values.claimToken }}"
        # kube-plex env vars
        - name: PMS_INTERNAL_ADDRESS
          value: http://{{ template "fullname" . }}:32400
        - name: PMS_IMAGE
          value: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TRANSCODE_PVC
{{- if .Values.persistence.transcode.claimName }}
          value: "{{ .Values.persistence.transcode.claimName }}"
{{- else }}
          value: "{{ template "fullname" . }}-transcode"
{{- end }}
        - name: DATA_PVC
{{- if .Values.persistence.data.claimName }}
          value: "{{ .Values.persistence.data.claimName }}"
{{- else }}
          value: "{{ template "fullname" . }}-data"
{{- end }}
        - name: CONFIG_PVC
{{- if .Values.persistence.config.claimName }}
          value: "{{ .Values.persistence.config.claimName }}"
{{- else }}
          value: "{{ template "fullname" . }}-config"
{{- end }}
        - name: KUBEPLEX_ENV
          value: executor
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /config
        - name: transcode
          mountPath: /transcode
        - name: shared
          mountPath: /shared
        resources:
{{ toYaml .Values.resources | indent 10 }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
{{- if .Values.persistence.data.claimName }}
          claimName: "{{ .Values.persistence.data.claimName }}"
{{- else }}
          claimName: "{{ template "fullname" . }}-data"
{{- end }}
      - name: config
        persistentVolumeClaim:
{{- if .Values.persistence.config.claimName }}
          claimName: "{{ .Values.persistence.config.claimName }}"
{{- else }}
          claimName: "{{ template "fullname" . }}-config"
{{- end }}
      - name: transcode
        persistentVolumeClaim:
{{- if .Values.persistence.transcode.claimName }}
          claimName: "{{ .Values.persistence.transcode.claimName }}"
{{- else }}
          claimName: "{{ template "fullname" . }}-transcode"
{{- end }}
      - name: shared
        emptyDir: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-workers
  labels:
    name: {{ template "fullname" . }}-workers
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: {{ template "fullname" . }}-workers
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        name: {{ template "fullname" . }}-workers
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ if .Values.rbac.create }}{{ template "fullname" . }}{{ else }}{{ .Values.rbac.serviceAccountName | quote }}{{ end }}
      initContainers:
      - name: kube-plex-install
        image: "{{ .Values.kubePlexImage.repository }}:{{ .Values.kubePlexImage.tag }}"
        imagePullPolicy: {{ .Values.kubePlexImage.pullPolicy }}
        command:
        - cp
        - /kubeplex
        - /shared/kubeplex
        volumeMounts:
        - name: shared
          mountPath: /shared
      containers:
      - name: plex
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # We replace the PMS binary with a postStart hook to save having to
        # modify the default image entrypoint.
        command:
        - /shared/kubeplex
        env:
        - name: TZ
          value: Europe/London
        # TODO: move this to a secret?
        - name: PLEX_CLAIM
          value: "{{ .Values.claimToken }}"
        # kube-plex env vars
        - name: PMS_INTERNAL_ADDRESS
          value: http://{{ template "fullname" . }}:32400
        - name: PMS_IMAGE
          value: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TRANSCODE_PVC
{{- if .Values.persistence.transcode.claimName }}
          value: "{{ .Values.persistence.transcode.claimName }}"
{{- else }}
          value: "{{ template "fullname" . }}-transcode"
{{- end }}
        - name: DATA_PVC
{{- if .Values.persistence.data.claimName }}
          value: "{{ .Values.persistence.data.claimName }}"
{{- else }}
          value: "{{ template "fullname" . }}-data"
{{- end }}
        - name: CONFIG_PVC
{{- if .Values.persistence.config.claimName }}
          value: "{{ .Values.persistence.config.claimName }}"
{{- else }}
          value: "{{ template "fullname" . }}-config"
{{- end }}
        - name: KUBEPLEX_ENV
          value: worker
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /config
        - name: transcode
          mountPath: /transcode
        - name: shared
          mountPath: /shared
        resources:
{{ toYaml .Values.resources | indent 10 }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
{{- if .Values.persistence.data.claimName }}
          claimName: "{{ .Values.persistence.data.claimName }}"
{{- else }}
          claimName: "{{ template "fullname" . }}-data"
{{- end }}
      - name: config
        persistentVolumeClaim:
{{- if .Values.persistence.config.claimName }}
          claimName: "{{ .Values.persistence.config.claimName }}"
{{- else }}
          claimName: "{{ template "fullname" . }}-config"
{{- end }}
      - name: transcode
        persistentVolumeClaim:
{{- if .Values.persistence.transcode.claimName }}
          claimName: "{{ .Values.persistence.transcode.claimName }}"
{{- else }}
          claimName: "{{ template "fullname" . }}-transcode"
{{- end }}
      - name: shared
        emptyDir: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-controller
  labels:
    name: {{ template "fullname" . }}-controller
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: {{ template "fullname" . }}-controller
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        name: {{ template "fullname" . }}-controller
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ if .Values.rbac.create }}{{ template "fullname" . }}{{ else }}{{ .Values.rbac.serviceAccountName | quote }}{{ end }}
      containers:
      - name: kubeplex-controller
        image: "{{ .Values.kubePlexImage.repository }}:{{ .Values.kubePlexImage.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # We replace the PMS binary with a postStart hook to save having to
        # modify the default image entrypoint.
        command:
        - /kubeplex
        env:
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBEPLEX_ENV
          value: controller
        resources:
{{ toYaml .Values.resources | indent 10 }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
